trigger:
  branches:
    include:
    - master
    - refs/tags/*

resources:
  containers:
  - container: postgres
    image: postgres:12.3
    ports:
    - 5432:5432
    env:
      POSTGRES_PASSWORD: postgres
  - container: redis
    image: redis:6.0.5-alpine
    ports:
    - 6379:6379

pool:
  vmImage: 'ubuntu-latest'

jobs:
- job: 'Test'
  services:
    postgres: postgres
    redis: redis
  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.8'
      architecture: 'x64'
  - task: PythonScript@0
    displayName: 'Export project path'
    inputs:
      scriptSource: 'inline'
      script: |
        """Search all subdirectories for `manage.py`."""
        from glob import iglob
        from os import path
        # Python >= 3.5
        manage_py = next(iglob(path.join('**', 'manage.py'), recursive=True), None)
        if not manage_py:
            raise SystemExit('Could not find a Django project')
        project_location = path.dirname(path.abspath(manage_py))
        print('Found Django project in', project_location)
        print('##vso[task.setvariable variable=projectRoot]{}'.format(project_location))
  - script: curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python
    displayName: 'Install poetry'
  - script: |
      $HOME/.poetry/bin/poetry config virtualenvs.create false
      $HOME/.poetry/bin/poetry install --no-dev
      pip install unittest-xml-reporting
      pip install coverage
    displayName: 'Install prerequisites'
  - script: |
      pushd '$(projectRoot)'
      coverage run manage.py test --testrunner xmlrunner.extra.djangotestrunner.XMLTestRunner --no-input && coverage xml
    displayName: 'Run tests'
    env: { TESTING_SERVER: true }
  - task: PublishTestResults@2
    inputs:
      testResultsFiles: "**/TEST-*.xml"
    condition: succeededOrFailed()
  - task: PublishCodeCoverageResults@1
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.xml'
