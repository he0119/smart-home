trigger:
  branches:
    include:
    - master
    - refs/tags/*

resources:
  containers:
  - container: postgres
    image: postgres:12.2
    ports:
    - 5432:5432
    env:
      POSTGRES_PASSWORD: postgres

pool:
  vmImage: 'ubuntu-latest'

jobs:
- job: 'Test'
  services:
    postgres: postgres
  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.8'
      architecture: 'x64'
  - task: PythonScript@0
    displayName: 'Export project path'
    inputs:
      scriptSource: 'inline'
      script: |
        """Search all subdirectories for `manage.py`."""
        from glob import iglob
        from os import path
        # Python >= 3.5
        manage_py = next(iglob(path.join('**', 'manage.py'), recursive=True), None)
        if not manage_py:
            raise SystemExit('Could not find a Django project')
        project_location = path.dirname(path.abspath(manage_py))
        print('Found Django project in', project_location)
        print('##vso[task.setvariable variable=projectRoot]{}'.format(project_location))
  - script: |
      python -m pip install --upgrade pip setuptools wheel
      pip install -r requirements.txt
      pip install unittest-xml-reporting
      pip install coverage
    displayName: 'Install prerequisites'
  - script: |
      pushd '$(projectRoot)'
      coverage run manage.py test --testrunner xmlrunner.extra.djangotestrunner.XMLTestRunner --no-input && coverage xml
    displayName: 'Run tests'
    env: { TESTING_SERVER: true }
  - task: PublishTestResults@2
    inputs:
      testResultsFiles: "**/TEST-*.xml"
    condition: succeededOrFailed()
  - task: PublishCodeCoverageResults@1
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.xml'

- job: 'Build'
  dependsOn: 'Test'
  variables:
    imageName: 'smart-home'
  steps:
    - bash: echo '##vso[task.setvariable variable=imageTag]test'
      condition: eq(variables['Build.Reason'], 'PullRequest')
      displayName: 'Set imageTag to test'
    - bash: echo '##vso[task.setvariable variable=imageTag]latest'
      condition: contains(variables['Build.SourceBranch'], 'master')
      displayName: 'Set imageTag to latest'
    - bash: |
        tag=`echo $(Build.SourceBranch) | grep -P 'v([0-9.]+)' -o`
        echo '##vso[task.setvariable variable=imageTag]'$tag
      condition: contains(variables['Build.SourceBranch'], 'tags')
      displayName: 'Set imageTag to tags'
    - bash: docker build -f Dockerfile -t $(dockerId)/$(imageName):$(imageTag) .
      displayName: 'Docker build'
    - bash: |
        docker login -u $(dockerId) -p $(pswd)
        docker push $(dockerId)/$(imageName):$(imageTag)
      displayName: 'Docker push'
